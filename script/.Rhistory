library("recommenderlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
data("MovieLense")
str(MovieLense)
movielense@data@i
MovieLense@data@i
data("Jester5k")
str(Jester5k)
Jester5k@data@Dimnames[[1]]
users <- Jester5k@data@Dimnames[[1]]
str(users)
str(Jester5k)
jokes <- Jester5k@data@Dimnames[[2]]
jokes
library(dplyr)
table(users)
users <- MovieLense@data@i
table(users)
sum(MovieLenseMeta$Action)
table(MovieLenseMeta$Action)
MovieLenseMeta
str(MovieLenseMeta)
length(unique(MovieLense@data@x))
length(unique(MovieLense@data@p))
length(unique(movielense@data@i))
length(unique(MovieLense@data@i))
jokes
JesterJokes
MovieLense
str(MovieLense)
View(MovieLense)
View(MovieLenseMeta)
MovieLense@data@Dimnames[[1]]
MovieLense@data@Dimnames[[2]]
MovieLense@data@Dim
MovieLense@data@p
MovieLense@data@i
MovieLense@data@p
MovieLense@data@Dimnames[[2]]
MovieLense@data@Dimnames[[1]]
MovieLense@data@Dimnames[[2]]
MovieLense@data@p
MovieLense
MovieLense@data
943*1664
99392/943
MovieLense@data@i
knitr::opts_chunk$set(echo = TRUE)
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
games2ratings <- as(games2, 'realRatingMatrix')
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
# define how much the users like the games based on the hours they spend on the games
# assume all the users created account at the same time, otherwise, we can't use the hours to identify
# how much they like the game, in the scale of 0-5
#  0-1, 0
#  1-4, 1
#  4-16,2
# 16-64,3
#64-256,4
# 256--,5
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
games2
# convert to the realRatingMatrix for the use of recommenderlab
games2ratings <- as(games2, 'realRatingMatrix')
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
# define how much the users like the games based on the hours they spend on the games
# assume all the users created account at the same time, otherwise, we can't use the hours to identify
# how much they like the game, in the scale of 0-5
#  0-1, 0
#  1-4, 1
#  4-16,2
# 16-64,3
#64-256,4
# 256--,5
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
print(games2)
# convert to the realRatingMatrix for the use of recommenderlab
games2ratings <- as(games2, 'realRatingMatrix')
print(games2)
recc <- NA
trainMyAlgorithm <- function(data) {
# We use <<- operator instead <- to save this in the global state
recc <<- Recommender(data, method="POPULAR")
}
applyMyAlgorithm <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 5)
return(as(pre, "list"))
}
trainMyAlgorithm(MovieLense[1:5000,])
trainMyAlgorithm(games2ratings[1:5000,])
applyMyAlgorithm(games2ratings[1,])
games2ratings[1,]
games2ratings[1,]$i
games2ratings@data@x
games2ratings@data@factors
games2ratings@data@Dimnames
games2ratings@data@i
games2ratings@data@i[1]
games2ratings@data@p
unique(games2$userId)
length(unique(games2$userId))
shape(games2ratings)
games2ratings@data@Dim
games2ratings[1]
games2ratings[1,]
games2ratings[0,]
games2ratings[2,]
games2ratings@data@Dimnames
games2ratings@data@factors
games2ratings@data@x
games2ratings@data
games2ratings@data@i
games2ratings@data@i
games2ratings@data@p
games2ratings@data@Dim
trainMyAlgorithm(games2ratings[1:10000,])
applyMyAlgorithm(games2ratings[1,])
trainMyAlgorithm(games2ratings[1:10000,])
applyMyAlgorithm(games2ratings[10001:11500,])
trainMyAlgorithm(games2ratings[1:10000,])
applyMyAlgorithm(games2ratings[10001:11350,])
trainMyAlgorithm(games2ratings[1:11000,])
applyMyAlgorithm(games2ratings[11300:11350,])
knitr::opts_chunk$set(echo = TRUE)
trainMyAlgorithm(games2ratings[1:10000,])
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
# define how much the users like the games based on the hours they spend on the games
# assume all the users created account at the same time, otherwise, we can't use the hours to identify
# how much they like the game, in the scale of 0-5
#  0-1, 0
#  1-4, 1
#  4-16,2
# 16-64,3
#64-256,4
# 256--,5
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
# convert to the realRatingMatrix for the use of recommenderlab
games2ratings <- as(games2, 'realRatingMatrix')
print(games2)
print(games2ratings@data@Dim)
recc <- NA
trainMyAlgorithm <- function(data) {
# We use <<- operator instead <- to save this in the global state
recc <<- Recommender(data, method="POPULAR")
}
applyMyAlgorithm <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 5)
return(as(pre, "list"))
}
trainMyAlgorithm(games2ratings[1:10000,])
x <- applyMyAlgorithm(games2ratings[10001:11350,])
x[1:50]
x[1:5]
recc <- NA
trainMyAlgorithm <- function(data) {
# We use <<- operator instead <- to save this in the global state
recc <<- Recommender(data, method="POPULAR")
}
applyMyAlgorithm <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 10)
return(as(pre, "list"))
}
trainMyAlgorithm(games2ratings[1:10000,])
x <- applyMyAlgorithm(games2ratings[10001:11350,])
x[1:5]
recc <- NA
trainIBCF <- function(data) {
# We use <<- operator instead <- to save this in the global state
recc <<- Recommender(data, method="IBCF",  parameter = list(method = "Cosine", normalize="Z-Score", k=300, na_as_zero=T))
}
applyIBCF <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 10)
return(as(pre, "list"))
}
trainIBCF(games2ratings[1:10000,])
recc <- NA
trainUBCF <- function(data) {
# We use <<- operator instead <- to save this in the global state
recc <<- Recommender(data, method="UBCF",  parameter = list(method = "Cosine"))
}
applyUBCF <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 10)
return(as(pre, "list"))
}
trainUBCF(games2ratings[1:9000,])
x <- applyUBCF(games2ratings[9001:11350,])
x[1:5]
games2[userId=='233397077']
games2[userId=='233424343']
games2[userId=='233408698']
games2[userId=='233407123']
x
x[1:5]
games2[userId=='233421657']
games2[userId=='233408698']
x[1:100]
# x[1:10]
games2[userId=='235037893']
x[1:20]
# x[1:10]
games2[userId=='233730505']
# x[1:10]
games2[userId=='233847882']
# x[1:10]
games2[userId=='233726801']
# x[1:10]
games2[userId=='233659279']
# x[1:10]
games2[userId=='233648242']
# x[1:10]
games2[userId=='233595859']
# x[1:10]
games2[userId=='233428283']
# x[1:10]
games2[userId=='233397077']
# x[1:10]
games2[userId=='233408698']
# x[1:10]
games2[userId=='233407123']
# x[1:10]
games2[userId=='233637211']
# x[1:10]
games2[userId=='233659279']
x[30:40]
# x[1:10]
games2[userId=='234348805']
# x[1:10]
games2[userId=='234262106']
# x[1:10]
games2[userId=='234190577']
x[1:5]
games2[userId=='234190577']
x$234190577
games2[userId=='234190577']
x$`234190577`
x[30:40]
games2[userId=='234286554']
x$`234286554`
trainHybrid <- function(data, randomness=0.3) {
recc <<- HybridRecommender(
Recommender(data, method="UBCF", parameter = list(method = "Cosine")),
Recommender(data, method="RANDOM"),
weights = c(1-randomness, randomness))
}
applyHybrid <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 10)
return(as(pre, "list"))
}
trainHybrid(games2ratings[1:9000,])
applyHybrid(games2ratings[9001:11350,])
x <- applyHybrid(games2ratings[9001:11350,])
x[1:5]
print(' ')
x[1]
x[1:5]
x[1]
x<-0
trainHybrid <- function(data, randomness=0.3) {
recc <<- HybridRecommender(
Recommender(data, method="UBCF", parameter = list(method = "Cosine")),
Recommender(data, method="RANDOM"),
weights = c(1-randomness, randomness))
}
applyHybrid <- function(data) {
# Note we use recc inside this function.
pre <- predict(recc, data, n = 10)
return(as(pre, "list"))
}
trainHybrid(games2ratings[1:9000,])
x <- applyHybrid(games2ratings[9001:11350,])
x[1:5]
svd <- NA
trainSVD <- function(data) {
# We use <<- operator instead <- to save this in the global state
svd <<- Recommender(data, method="SVD",  parameter = list(k = 50))
}
applySVD <- function(data) {
# Note we use recc inside this function.
pre <- predict(svd, data, n = 10)
return(as(pre, "list"))
}
trainSVD(games2ratings[1:9000,])
x_svd <- applySVD(games2ratings[9001:11350,])
x_svd[1:5]
knitr::opts_chunk$set(echo = TRUE)
svd <- NA
trainSVD <- function(data) {
# We use <<- operator instead <- to save this in the global state
svd <<- Recommender(data, method="SVD",  parameter = list(k = 50))
}
applySVD <- function(data) {
# Note we use recc inside this function.
pre <- predict(svd, data, n = 10)
return(as(pre, "list"))
}
trainSVD(games2ratings[1:6000,])
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
# define how much the users like the games based on the hours they spend on the games
# assume all the users created account at the same time, otherwise, we can't use the hours to identify
# how much they like the game, in the scale of 0-5
#  0-1, 0
#  1-4, 1
#  4-16,2
# 16-64,3
#64-256,4
# 256--,5
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
# convert to the realRatingMatrix for the use of recommenderlab
games2ratings <- as(games2, 'realRatingMatrix')
print(games2)
print(games2ratings@data@Dim)
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
# define how much the users like the games based on the hours they spend on the games
# assume all the users created account at the same time, otherwise, we can't use the hours to identify
# how much they like the game, in the scale of 0-5
#  0-1, 0
#  1-4, 1
#  4-16,2
# 16-64,3
#64-256,4
# 256--,5
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
# convert to the realRatingMatrix for the use of recommenderlab
games2ratings <- as(games2, 'realRatingMatrix')
head(games2)
head(games2ratings@data@Dim)
library(recommenderlab)
library(data.table)
# load data and convert to datatable
games <- read.csv('steam-200k.csv',sep=',',header = FALSE)
games <- as.data.table(games)
# rename the columns and drop the column V5 since it doesn't contain any information I need
names(games)=c('userId','gameNames','purchase_type','hours_spent','V5')
games$V5 <- NULL
# select the rows that describe how many hours has the users played on each game, and drop the unnecessary column
games <- games[purchase_type=='play',]
games$purchase_type <- NULL
games2 <- games
# define how much the users like the games based on the hours they spend on the games
# assume all the users created account at the same time, otherwise, we can't use the hours to identify
# how much they like the game, in the scale of 0-5
#  0-1, 0
#  1-4, 1
#  4-16,2
# 16-64,3
#64-256,4
# 256--,5
games2$ratings <- cut(games2$hours_spent,breaks = c(0,1,4,16,64,256,12000), labels = c(0,1,2,3,4,5))
games2$hours_spent<-NULL
# convert to the realRatingMatrix for the use of recommenderlab
games2ratings <- as(games2, 'realRatingMatrix')
# individual projects
# datasets: housing price dataset or black friday dataset
# for housing price, do not use date, treat as a general dataset
# for blackfriday, do not use customerID
setwd("~/Desktop/IEMBD/TERM3/R/individual_project/script")
# need to split train into train and test
train <- read.csv('../data/house_price_train.csv')
# test sets is used for submission only
submission <- read.csv('../data/house_price_test.csv')
library(tidyr)
library(dplyr)
library(data.table)
library(glmnet)
library(randomForest)
library(ggplot2)
library(corrplot)
# target variable: price
str(train)
str(submission)
# manipulate the data:
# 1.check the variables
head(train)
dim(train)
# 17277 rows 21 variables
# variables:
names(train)
glimpse(train)
summary(train)
# as shown in hist, most of the houses are concerntrated in the low price
hist(train$price)
# check for the relationship between yearbuilt and the price
# as shown there is no big difference for the houses various different year built
# also not for year renovated
plot(train$yr_built, train$price)
plot(train$yr_renovated, train$price)
# however most of the early year built house are renovated
# so maybe there are some relationship between whether renovated and price for the old houses
# then how do we define an old house????
plot(train$grade, train$price)
# the function used to clean the data
# will first try everything then put them into functions and apply to both train and submission
clean_data <- function(df){
# split the sales date to year month day and convert to factor
df_ymd <- separate(df, col = date, into = c("month","day","year"), sep = "/")
# convert to numeric
cols2nums <- c('month','day','year','bedrooms','bathrooms')
for(colnum in cols2nums){df_ymd[,colnum] <- as.numeric(df_ymd[,colnum])}
# calculate the age of the house
df_ymd$build_age <- (df_ymd$year - df_ymd$yr_built)
# update some value
# bin the numerical features(the sqft ones)
df_ymd$sqft_living15 <- .bincode(df_ymd$sqft_living15,c(0,1000,2000,3000,4000,5000,6000,1000000),TRUE,TRUE)
df_ymd$sqft_lot15 <- .bincode(df_ymd$sqft_lot15,c(0,5000,10000,15000,20000,25000,1000000),TRUE,TRUE)
df_ymd$sqft_above <- .bincode(df_ymd$sqft_above,c(0,500,1000,1500,2000,2500,1000000),TRUE,TRUE)
df_ymd$sqft_basement <- .bincode(df_ymd$sqft_basement,c(0,1,200,400,600,800,1000,1500,1000000),TRUE,TRUE)
# df_ymd$yr_built <- .bincode(df_ymd$yr_built,c(1900,1920,1940,1960,1980,2000,2020,1000000),TRUE,TRUE)
df_ymd$yr_renovated <- .bincode(df_ymd$yr_renovated,c(0,1900,1920,1940,1960,1980,2000,2020,1000000),TRUE,TRUE)
# df_ymd$bedrooms_fct <- .bincode(df_ymd$bedrooms,c(0,1900,1920,1940,1960,1980,2000,2020,1000000),TRUE,TRUE)
# factorize the features
col2factor <- c("year","month","day","floors","zipcode",'bedrooms',
"view","condition","yr_built","yr_renovated","waterfront",
"sqft_living15","sqft_lot15","sqft_above","sqft_basement")
for(col_name in col2factor){df_ymd[,col_name] <- as.factor(df_ymd[,col_name])}
# decide which features to drop
# going to drop zipcode for now, because it needs time to search for the rich and poor areas
# df_ymd <- select(df_ymd,-c(id,lat,long,sqft_living,sqft_lot,zipcode,day))
print("Missing Values? ")
print(any(is.na(df_ymd)))
return(df_ymd)
}
train_ymd <- clean_data(train)
glimpse(train_ymd)
knitr::opts_chunk$set(echo = TRUE)
glimpse(train)
glimpse(train)
print(any(is.na(train)))
print(any(is.na(submission)))
glimpse(train)
glimpse(submission)
print(any(is.na(train)))
print(any(is.na(submission)))
glimpse(train)
glimpse(submission)
